 D:\isel\PC_collect\isel-videos-pdm-pc\PC LEIC43D 2122v\PC LEIC43D 2122v - Aula 01 [M3sjLOJqC6w].mp4


thread.start() - se chamar só thread.run() chamada o run, mas não mobiliza processador virtual para criar a thread.


threading hazard tests.
contador partilhado 
N_OF_THREADS=10, REPS=1_000_000

private val myCounter: Int = 0

arrancar com 1o threads a incrementar aquele contador
estou á espera que o valor final seja quantos incrementos? 10 * 1_000_000 = 10_000_000.

fun 'multiple threads incrementing shared counter':
repeat(N_OF_THREADS) {
 // para cada uma delas, criat thread
 Thread { // cada thread incrementa, o myCounter, quantavs vezes o REPS.
   repeat(NUM_OF_REPS) { myCounter +=1 }
}.start()
}

----

(0 < until < N_OF_THREADS).map {
  // para cada uma delas, criat thread
  Thread { // cada thread incrementa, o myCounter, quantavs vezes o REPS.
      log.info("Thread $it starting")
      repeat(NUM_OF_REPS) { myCounter +=1 }
  }.apply { start() }
}. forEach { it.join() }

// certificar

log.info("myCoubter = $myCounter")
Vai dar 10_000_000 ou não?
 - Não, porque estã errado. Apesar de poder dar o valor certo, por acaso.
 - Deu 1_834_727, era suposto ser 10_000_000.
----

O que está a acontecer?
Chama-se Lost Update.

O que parece ações atomicas, não sáo na verdade.
A linha 'myCoubter+=1' é equivalente a:
[ var counter = myCounter
  counter = counter+1
  myCounter = counter ]

Imaginar duas treads, cada uma a fazer esta sequencia.
uma atualizava o valor, e a outra atualiza mas fica igual pq valor inicial era 0 em ambos.

Solução: Usar AtomicInteger - é um tipo da JVM que permite fazer esta operação sem ser interrompido por uma outra trhrad peolo caminho.

N_OF_THREADS=10, REPS=1_000_000
private val myCounter: Int = 0
  este passa para:
private val : AtomicInteger = AtomicInteger(0)

(0 < until < N_OF_THREADS).map {
  // para cada uma delas, criat thread
  Thread { // cada thread incrementa, o myCounter, quantavs vezes o REPS.
      log.info("Thread $it starting")
      /* repeat(NUM_OF_REPS) { myCounter +=1 } */
      repeat(NUM_OF_REPS) { myCounter.incrementAndGet() }
        /* diz-se que é atomico se outras threads que estão a
         fazer a mesma sequencia de operçaões, não consigam
          observar resultados intermedios, sem perturbar execução 
          uma das outras. */
        /* Enquanto está a ser incrementado por 1 thread, 
        não hã mais nenhuma a faze-lo. Não admite interferencia de outra naquela valor */
        /* AtomicInteger é 'thread safe' - ou seja, admite acesso concerrente de 
        varios fios de execição e mantem as suas carateristicas. */
  }.apply { start() }
}. forEach { it.join() }

log.info("myCounter = ${myCounter.get()}")
=> Agora já aparece 10_000_000.

---


outra função:
fun 'create threads using lambda and sharing mutable state':
distinguir estado partilhado de estado privado das threads.
var someValue =  42 // variavel local defenida na stack, que desaparece qnd função terminar.
 // cada thread também tem o seu proprior stack, e por isso
 ao partilhar valor entre threads, esse estado passou a ser publico - partilhado por varias threads.
 thread existe na tread que executa o teste.

 Thread { 
    someValue = 95
    // ao fazer isto, someValue vai passar a estar em estado partilhado.
 }.start()

Thread.sleep(2000)
 log.info("someValue = $someValue")
// Não tenho garantia que escrita já tenha acontecido, apesar de poder aparecer o valor certo.



