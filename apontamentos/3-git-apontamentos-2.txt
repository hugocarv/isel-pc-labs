pc-1
https://www.youtube-nocookie.com/embed/7THFvoKf7jk?list=PL8XxoCaL3dBgPaKjgP87uSmKZ1MsIZ4rr&autoplay=1&iv_load_policy=3&loop=1&start=
PC LEIC41N 2122v - Aula 01
---
aula1

servidor sockets
val port = if(args.isEmpty()) 8080 else args[0]

ServerSocket = ServerSocket(port) - cria socket no porto.
val sessionSocket = ServerSocket.accept() - manifesta disponibilidade para atender pedidos.
sessionSocket - representa o socket para comunicar com aquele cliente em particular.

nc localhost 8000

testes:
private fun threadCode() = // simulate Some work...

fun 'create, start and join a trhad':
val thread = Thread()
thread.start()

val thread = Thread(::threadCode) - passar á thread a função que tem o códugo  que quero executar.
thread.start()

Problema: Não aparece mensagem do threadCode()! São duas threads: a thread do threeadCode e do test worker.
Resolver: 

Thread(::threadCode).start() - assim já mostrou resultado?

Thread só corre quando a outra terminar, tenho de ser explicito:
sincronização com a conlusão:
val thread = Thread(::threadCode)
thead.start()
thread.join() // Quero esperara que thread termine! Expressa intenção de ficar á espera que a outra termine.
//So continuar depois da outra terminar. Alternativa ao sleep(2000)
Agora sim pode-se afirmar que esta mensagem só vai aparecer depois da outra.

Sintaxe alternativa.
Thread(::threadCode).apply { start() }.join()

fun 'multiple threads, one function':
val t = listOf(
    Thread(::threadCode),
    Thread(::threadCode),
    Thread(::threadCode),
)

threads.forEach { it.start()} // corre cada uma das threads.
threads.forEach { it.join()} // sincronizacao/espera que terminem
 

PC LEIC41N 2122v - Aula 02
https://www.youtube-nocookie.com/embed/7THFvoKf7jk?list=PL8XxoCaL3dBgPaKjgP87uSmKZ1MsIZ4rr&autoplay=1&iv_load_policy=3&loop=1&start=
=============================
48minutes

shared Counter
private val sharedCounter = 0

fun 'multiple thhreads and incrementing shared counter':
(o until N_OF_THREADS).map {
    Thread {
        reepeat(N_OF_REPS) { sharedCounter += 1}
    }.apply(Thread::start)
}.forEach(Thread::join)


log.info("myCoubter = $myCounter")
Vai dar 10_000_000 ou não?
 - Não, porque estã errado. Apesar de poder dar o valor certo, por acaso.
 - Deu 1_834_727, era suposto ser 10_000_000.
----


O que está a acontecer?
Chama-se Lost Update.

O que parece ações atomicas, não sáo na verdade.
A linha 'myCoubter+=1' é equivalente a:
[ var counter = myCounter
  counter = counter+1
  myCounter = counter ]

  Imaginar duas treads, cada uma a fazer esta sequencia.
uma atualizava o valor, e a outra atualiza mas fica igual pq valor inicial era 0 em ambos.

Solução: Usar AtomicInteger - é um tipo da JVM que permite fazer esta operação sem ser interrompido por uma outra trhrad peolo caminho.

N_OF_THREADS=10, REPS=1_000_000
private val myCounter: Int = 0
  este passa para:
private val : AtomicInteger = AtomicInteger(0)

Solução:


fun 'multiple thhreads and incrementing shared counter, fixed':
(o until N_OF_THREADS).map {
    Thread {
        reepeat(N_OF_REPS) { sharedCounter.incrementAndGet()}
    }.apply(Thread::start)
}.forEach(Thread::join)

log.info("sharedCoibter = ${sharedCounter.get()}")
Aqui já aparece 10_000_000.

Quando há dependencia de dados, toda a gente respeita a ordem.
Se não há, não é possível garantir a ordem.
 

Thhreading hazards: 
-ações compostas (read-modify-write, lost update)
- check-and-act (tomar decisão em função do valor, mas entretanto valor muda)


fun 'multiple thhreads inserting in a shared list':

lock , o que é - é um sincronixador que quem quer aceder aos dados, tem que adquirir o lock.

private val lock = ReentrantLock()
adquirir locl: lock.lock()

fun push(value:T) {
    lock.lock()
    top = Node(value,top) - só passa para aqui se o fio de execição conseguir adquirir o lock. Senão, fica bloqueada até que lock fique livre.
    lock.unlock() - libertar lock.
}

lock protege acesso aos dados partilhados.

O AtomicInteger tem:
 get()
 getAndIncrement()
 incrementAndGet()

 semaforos  1:50:00


 Aula 03 - uthreads
 ...

 



